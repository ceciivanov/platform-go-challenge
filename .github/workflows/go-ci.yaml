name: go-ci

# Define the event that triggers the workflow
on:
  workflow_dispatch:  # Run Workflow manually
  push: # Run Workflow on push to main branch
    branches: [ 'main' ]
    paths-ignore: # Skip trigger on specific paths
      - 'imgs/**'
      - 'README.md'
      - '.github/workflows/**'
  pull_request:  # Run Workflow on main branch PR
    branches: [ 'main']

jobs:
  full_ci:  # full ci job
    strategy:  # Matrix for different go versions
      matrix:
        go_version: [ 1.22.4 ]  # current go version used for the project

    runs-on: ubuntu-20.04

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Prepare Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go_version }}

      - name: Install dependencies
        run: go get github.com/gorilla/mux && go get github.com/stretchr/testify

      - name: Build
        run: go build -v ./...

      # Install tool to convert go coverage reports to cobertura format
      - name: Install gocover-cobertura
        run: |
            go get github.com/boumenot/gocover-cobertura && go install github.com/boumenot/gocover-cobertura

      # Install gotestfmt on the VM running the action.
      - name: Set up gotestfmt
        uses: GoTestTools/gotestfmt-action@v2
        with:
          # Optional: pass the gotestfmt version you want to run. 
          version: v2.0.0
          # Optional: pass an organization name and repo to use a fork
          org: GoTestTools
          repo: gotestfmt
          
      - name: Run tests
        run: sudo go test -race -json -v -coverprofile=coverage.txt ./... 2>&1 | tee /tmp/gotest.log | gotestfmt
      
      - name: Convert go coverage to corbetura format
        run: gocover-cobertura < coverage.txt > coverage.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

      - name: Generate code coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: false
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md